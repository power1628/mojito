///NOTICE: This is an opencypher implementation. Not Neo4j Cypher.


Cypher = { SOI ~ Statement ~ ";"? ~ EOI }

Statement = { Query }

Query = { RegularQuery }

RegularQuery = { SingleQuery ~ Union* }
Union = { UnionUnique | UnionAll }
UnionUnique = { "union" ~ SingleQuery }
UnionAll = { "union" ~ "all" ~ SingleQuery }

/// TODO(pgao): multi part query
SingleQuery = { SinglePartQuery }
SinglePartQuery = {
    ( ReadingClause* ) // ~ Return )
//    | ( ReadingClause* ~ UpdatingClause+ ~ Return ? )
}

/// TODO(pgao): Unwind, InQueryCall support
ReadingClause = { Match } 

Match = { OPTIONAL? ~ "match" ~ Pattern } //~ Where? }

/// Pattern
Pattern = { PatternPart ~ ( "," ~ PatternPart )* }
PatternPart = { NamedPatternPart | AnonymousPatternPart }
NamedPatternPart = { Variable ~ "=" ~ AnonymousPatternPart }
AnonymousPatternPart = { PatternElement }

/// PatternElement
PatternElement = {
    NodePattern ~ PatternElementChain*
    | ( "(" ~ PatternElement ~ ")" )
}


/// NodePattern
NodePattern = { "(" ~ Variable? ~ NodeLabels? ~ Properties? ~ ")" }
NodeLabels = { NodeLabel+ }
NodeLabel = { ":" ~ LabelName }
LabelName = { SchemaName }
SchemaName = ${ SymbolicName | ReservedWord }

/// RelationshipsPattern
RelationshipsPattern = { NodePattern ~ PatternElementChain+ }
PatternElementChain = { RelationshipPattern ~ NodePattern }

RelationshipPattern = {
	BidirectionalRelationship
	| LeftRelationship
	| RightRelationship
	| UndirectedRelationship
}

BidirectionalRelationship = {
	"<-" ~ RelationshipDetail ~ "->"
}
LeftRelationship = {
	"<-" ~ RelationshipDetail ~ "-"
}
RightRelationship = {
	"-" ~ RelationshipDetail ~ "->"
}
UndirectedRelationship = {
	"-" ~ RelationshipDetail ~ "-"
}


/// TODO RangeLiteral
RelationshipDetail = {
	"[" ~ Variable? ~ RelationshipTypes? ~ /*RangeLiteral? ~ */ Properties? ~ 
	"]"
}
RelationshipTypes = {
	":" ~ RelTypeName ~ ( "|" ~ ":" ~ RelTypeName)*
}
RelTypeName = { SchemaName }




/// TODO Parameter
Properties = { MapLiteral }

MapLiteral = {
    "{" ~ ( 
        PropertyKeyName ~ ":" ~ Expression ~ ( 
            "," ~ PropertyKeyName ~ ":" ~ Expression
        )* 
    )? ~ "}"
}

PropertyKeyName = { SchemaName }

/// Return

/// Where

ReservedWord = {
	"ALL"
	| "ASC"
	| "ASCENDING"
	| "BY"
	| "CREATE"
	| "DELETE"
	| "DESC"
	| "DESCENDING"
	| "DETACH"
	| "EXISTS"
	| "LIMIT"
	| "MATCH"
	| "MERGE"
	| "ON"
	| "OPTIONAL"
	| "ORDER"
	| "REMOVE"
	| "RETURN"
	| "SET"
	| "L_SKIP"
	| "WHERE"
	| "WITH"
	| "UNION"
	| "UNWIND"
	| "AND"
	| "AS"
	| "CONTAINS"
	| "DISTINCT"
	| "ENDS"
	| "IN"
	| "IS"
	| "NOT"
	| "OR"
	| "STARTS"
	| "XOR"
	| "FALSE"
	| "TRUE"
	| "NULL"
	| "CONSTRAINT"
	| "DO"
	| "FOR"
	| "REQUIRE"
	| "UNIQUE"
	| "CASE"
	| "WHEN"
	| "THEN"
	| "ELSE"
	| "END"
	| "MANDATORY"
	| "SCALAR"
	| "OF"
	| "ADD"
	| "DROP"
}


Expression = { ExpressionPrefix* ~ ExpressionPrimary  ~ ( ExpressionInfix ~ ExpressionPrefix* ~ ExpressionPrimary )* }
ExpressionInfix = _{ Or | Xor | And | Eq | NotEq | Gt | Lt | GtEq | LtEq | Plus | Minus | Multiply | Divide | Modulo | PowerOf }
ExpressionPrimary = { Atom }
ExpressionPrefix = { PositivePrefix | NegativePrefix | NotPrefix}

Or = { "or" }
Xor = { "xor" }
And = { "and" }
Eq = { "=" }
NotEq = { "<>" }
Gt = { ">" }
Lt = { "<" }
GtEq = { ">= " }
LtEq = { "<=" }
Plus = { "+" }
Minus = { "-" }
Multiply = { "*" }
Divide = { "/" }
Modulo = { "%" }
PowerOf = { "^" }
PositivePrefix = { "+" }
NegativePrefix = { "-" }
NotPrefix = { "not" }


Literal = {
    BooleanLiteral
    | NullLiteral
    | NumberLiteral
    | StringLiteral
    // | ListLiteral
    | MapLiteral
}

BooleanLiteral = @{ "true" | "false" }
NullLiteral = @{"null"}

StringLiteral = ${
    "\"" ~ ( (!("\"") ~ CharLiteral) | EscapedChar )* ~  "\""  | 
    "'" ~ ( (!("'") ~ CharLiteral) | EscapedChar )* ~  "'" 
}

CharLiteral = @{
    ! ("\\") ~ ANY
}

EscapedChar = _{
    "\\" ~ CharEscapeSequence | 
    "\\u" ~ UnicodeEscapeSequence
}

CharEscapeSequence = @{
    ( "\\"
        | "'"
        | "\""
        | "b"
        | "f"
        | "n"
        | "r"
        | "t"
    )
    | ( !EscapeCharSet ~ ANY )
}

EscapeCharSet = _{
    "\\"
    | "'"
    | "\""
    | "b"
    | "f"
    | "n"
    | "r"
    | "t"
    | "u" // unicode
}

UnicodeEscapeSequence = @{
    ASCII_HEX_DIGIT{4} 
    | ASCII_HEX_DIGIT{8}
}

NumberLiteral = @{
    DoubleLiteral | IntegerLiteral
}

DoubleLiteral = _{
    ExponentDecimalReal | RegularDecimalReal
}

ExponentDecimalReal = _{
    ( ASCII_DIGIT+
        | ( ASCII_DIGIT+ ~ "." ~ASCII_DIGIT+ )
        | ( "." ~ ASCII_DIGIT+ )
    ) ~ ( "e" ~ "-"? ~ ASCII_DIGIT+ )
}

RegularDecimalReal = _{
    ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+
}

IntegerLiteral = _{
    HexInteger | OctalInteger | DecimalInteger
}

HexInteger = @{ "0x" ~ ASCII_HEX_DIGIT+ }
OctalInteger = @{ "0o" ~ ASCII_OCT_DIGIT+ }
DecimalInteger = @{ "0" | ( ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* ) } 

SymbolicName = @{
    UnescapedSymbolicName
    //| EscapedSymbolicName
    | HexLetter
    | "count"
    | "filter"
    | "extract"
    | "any"
    | "none"
    | "single"
}

UnescapedSymbolicName = @{
    IdentifierStart ~ IdentifierPart*
}

IdentifierStart = _{
    ID_START | CONNECTOR_PUNCTUATION
}

IdentifierPart = _{
    ID_CONTINUE | CURRENCY_SYMBOL
}

EscapedSymbolicName = {
    ("`" ~ (!"`" ~ ANY)* ~ "`")+
}

Parameter = @{
    "$" ~ ( SymbolicName | DecimalInteger )
}


Atom = {
    Literal 
    // | Parameter
    /// 	| ( COUNT SP? '(' SP? '*' SP? ')')
	/// 	| oC_ListComprehension
	/// 	| oC_PatternComprehension
	/// 	| oC_Quantifier
	/// 	| oC_PatternPredicate
	/// 	| oC_ParenthesizedExpression
	/// 	| oC_FunctionInvocation
	/// 	| oC_ExistentialSubquery
	| Variable
}

Variable = { SymbolicName }


HexLetter = {
    "a" | "b" | "c" | "d" | "e" | "f"
}

ALL = { "all" }
MATCH = { "match" }
OPTIONAL = { "optional"}
UNION = { "union" }
WITH = { "with" }




LEFT_ARROW_HEAD = @{ 
    "<"
    | "\u{27e8}"
	| "\u{3008}"
	| "\u{fe64}"
	| "\u{ff1c}"
}

RIGHT_ARROW_HEAD = {
    ">"
	| "\u{27e9}"
	| "\u{3009}"
	| "\u{fe65}"
	| "\u{ff1e}"
}
DASH = {
    "-"
	| "\u{00ad}"
	| "\u{2010}"
	| "\u{2011}"
	| "\u{2012}"
	| "\u{2013}"
	| "\u{2014}"
	| "\u{2015}"
	| "\u{2212}"
	| "\u{fe58}"
	| "\u{fe63}"
	| "\u{ff0d}"
}



//----------------------------------------------------
// Whitespace and comments
//----------------------------------------------------
WHITESPACE = _{ SPACE_SEPARATOR | " " | "\t" | "\n"  | "\r" }
COMMENT = _{ LINE_COMMENT | BLOCK_COMMENT }
LINE_COMMENT = _{ "//" ~ (!EOI) ~ ANY}
BLOCK_COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
LineTerminator = _{ "\u{000A}" | "\u{000D}" | "\u{2028}" | "\u{2029}" }
